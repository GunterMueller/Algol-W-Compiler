type token =
  | Identifier of (Table.Id.t)
  | String of (string)
  | Real of (string * string)
  | Imaginary of (string * string)
  | LongReal of (string * string)
  | LongImaginary of (string * string)
  | Bits of (string)
  | Integer of (string)
  | FULLSTOP
  | EOF
  | TRUE
  | FALSE
  | NULL
  | IF
  | THEN
  | ELSE
  | CASE
  | OF
  | WHILE
  | DO
  | ASSERT
  | GOTO
  | FOR
  | UNTIL
  | STEP
  | AND
  | OR
  | SHL
  | SHR
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | DIV
  | REM
  | STARSTAR
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | IS
  | ASSIGN
  | BEGIN
  | COLON
  | SEMICOLON
  | END
  | BRA
  | COMMA
  | BAR
  | KET
  | INTEGER
  | REAL
  | COMPLEX
  | LONG_REAL
  | LONG_COMPLEX
  | LOGICAL
  | BITS
  | STRING
  | REFERENCE
  | LONG
  | SHORT
  | ABS
  | NOT
  | ARRAY
  | COLONCOLON
  | PROCEDURE
  | VALUE
  | RESULT
  | RECORD
  | ALGOL
  | FORTRAN

open Parsing;;
let _ = parse_error;;
# 30 "parser.mly"
  let pos i               = Location.of_position (Parsing.rhs_start_pos i)
  let rhs_end_pos i       = Location.of_position (Parsing.rhs_end_pos i)
  let symbol_start_pos () = Location.of_position (Parsing.symbol_start_pos ())

  type 'a seq = Snoc of 'a seq * 'a | Empty   (* backward list for doing lots of appends *)
  let (++) xs x = Snoc (xs, x)
  let lone x = Snoc (Empty, x)
  let lst q = 
    let rec rev_append sq ls =
      match sq with
      | Empty -> ls
      | Snoc (front, last) -> rev_append front (last :: ls)
    in
    rev_append q []
# 94 "parser.ml"
let yytransl_const = [|
  265 (* FULLSTOP *);
    0 (* EOF *);
  266 (* TRUE *);
  267 (* FALSE *);
  268 (* NULL *);
  269 (* IF *);
  270 (* THEN *);
  271 (* ELSE *);
  272 (* CASE *);
  273 (* OF *);
  274 (* WHILE *);
  275 (* DO *);
  276 (* ASSERT *);
  277 (* GOTO *);
  278 (* FOR *);
  279 (* UNTIL *);
  280 (* STEP *);
  281 (* AND *);
  282 (* OR *);
  283 (* SHL *);
  284 (* SHR *);
  285 (* PLUS *);
  286 (* MINUS *);
  287 (* STAR *);
  288 (* SLASH *);
  289 (* DIV *);
  290 (* REM *);
  291 (* STARSTAR *);
  292 (* EQ *);
  293 (* NE *);
  294 (* GT *);
  295 (* LT *);
  296 (* GE *);
  297 (* LE *);
  298 (* IS *);
  299 (* ASSIGN *);
  300 (* BEGIN *);
  301 (* COLON *);
  302 (* SEMICOLON *);
  303 (* END *);
  304 (* BRA *);
  305 (* COMMA *);
  306 (* BAR *);
  307 (* KET *);
  308 (* INTEGER *);
  309 (* REAL *);
  310 (* COMPLEX *);
  311 (* LONG_REAL *);
  312 (* LONG_COMPLEX *);
  313 (* LOGICAL *);
  314 (* BITS *);
  315 (* STRING *);
  316 (* REFERENCE *);
  317 (* LONG *);
  318 (* SHORT *);
  319 (* ABS *);
  320 (* NOT *);
  321 (* ARRAY *);
  322 (* COLONCOLON *);
  323 (* PROCEDURE *);
  324 (* VALUE *);
  325 (* RESULT *);
  326 (* RECORD *);
  327 (* ALGOL *);
  328 (* FORTRAN *);
    0|]

let yytransl_block = [|
  257 (* Identifier *);
  258 (* String *);
  259 (* Real *);
  260 (* Imaginary *);
  261 (* LongReal *);
  262 (* LongImaginary *);
  263 (* Bits *);
  264 (* Integer *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\003\000\004\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\010\000\010\000\005\000\005\000\008\000\008\000\006\000\
\006\000\006\000\006\000\007\000\007\000\011\000\011\000\011\000\
\011\000\011\000\015\000\015\000\016\000\016\000\016\000\016\000\
\012\000\013\000\013\000\013\000\014\000\014\000\017\000\017\000\
\017\000\017\000\019\000\019\000\018\000\018\000\018\000\020\000\
\020\000\020\000\020\000\021\000\022\000\032\000\032\000\030\000\
\026\000\027\000\027\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\029\000\029\000\
\023\000\023\000\034\000\034\000\034\000\034\000\024\000\024\000\
\025\000\025\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\033\000\033\000\000\000\000\000\000\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\002\000\001\000\003\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\003\000\003\000\002\000\001\000\002\000\001\000\
\002\000\003\000\003\000\001\000\003\000\003\000\004\000\006\000\
\005\000\005\000\006\000\006\000\003\000\002\000\001\000\000\000\
\003\000\007\000\009\000\005\000\002\000\001\000\001\000\004\000\
\006\000\009\000\001\000\003\000\001\000\001\000\000\000\001\000\
\001\000\001\000\001\000\002\000\006\000\001\000\003\000\003\000\
\005\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\001\000\004\000\004\000\001\000\003\000\
\006\000\005\000\001\000\002\000\002\000\000\000\003\000\000\000\
\001\000\003\000\002\000\003\000\003\000\004\000\004\000\003\000\
\006\000\001\000\003\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\007\000\
\008\000\009\000\010\000\012\000\006\000\013\000\014\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\000\000\000\000\000\000\000\000\000\000\132\000\016\000\
\000\000\000\000\000\000\018\000\019\000\020\000\017\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\000\000\000\000\
\000\000\000\000\133\000\000\000\000\000\000\000\134\000\000\000\
\088\000\089\000\091\000\090\000\000\000\135\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\029\000\030\000\031\000\000\000\000\000\057\000\000\000\
\053\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\111\000\000\000\000\000\005\000\085\000\000\000\083\000\000\000\
\000\000\000\000\000\000\073\000\000\000\025\000\059\000\055\000\
\058\000\052\000\061\000\002\000\000\000\000\000\034\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\107\000\109\000\110\000\000\000\000\000\
\000\000\121\000\000\000\000\000\098\000\000\000\000\000\000\000\
\112\000\000\000\000\000\084\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\000\
\000\000\119\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\114\000\000\000\000\000\097\000\000\000\094\000\
\000\000\081\000\000\000\000\000\000\000\068\000\067\000\000\000\
\000\000\000\000\128\000\122\000\000\000\000\000\000\000\000\000\
\000\000\116\000\117\000\113\000\099\000\000\000\000\000\093\000\
\000\000\000\000\074\000\000\000\000\000\127\000\000\000\000\000\
\095\000\000\000\000\000\130\000\000\000\082\000\075\000\000\000\
\129\000\131\000"

let yydgoto = "\005\000\
\031\000\051\000\055\000\062\000\032\000\033\000\034\000\081\000\
\210\000\171\000\036\000\037\000\038\000\124\000\039\000\193\000\
\040\000\119\000\120\000\056\000\057\000\058\000\059\000\156\000\
\176\000\060\000\182\000\061\000\115\000\216\000\178\000\217\000\
\253\000\211\000"

let yysindex = "\084\000\
\114\006\127\255\088\255\114\006\000\000\234\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\114\006\114\006\114\006\114\006\038\255\041\255\114\006\114\006\
\000\000\114\006\114\006\114\006\114\006\114\006\000\000\000\000\
\114\005\088\255\247\003\000\000\000\000\000\000\000\000\011\255\
\000\000\000\000\000\000\000\000\000\000\000\000\012\255\028\255\
\031\255\062\255\000\000\057\255\048\255\119\255\000\000\131\000\
\000\000\000\000\000\000\000\000\015\255\000\000\099\004\242\005\
\188\004\199\006\013\007\117\007\000\000\092\255\058\004\058\004\
\172\006\000\000\000\000\000\000\222\255\226\254\000\000\138\255\
\000\000\054\007\120\255\160\000\000\000\114\006\114\006\114\006\
\114\006\114\006\114\006\114\006\114\006\114\006\114\006\114\006\
\114\006\114\006\114\006\114\006\114\006\114\006\114\006\114\006\
\160\255\170\255\169\255\158\255\198\000\204\255\159\255\000\000\
\000\000\169\255\161\255\000\000\000\000\217\006\000\000\021\255\
\050\006\237\254\114\006\000\000\114\006\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\222\255\199\255\000\000\000\000\
\058\004\058\004\024\255\024\255\024\255\024\255\000\000\185\255\
\185\255\185\255\185\255\185\255\185\255\185\255\117\007\171\255\
\172\255\075\255\179\003\163\255\000\000\158\255\124\002\114\255\
\207\255\236\255\242\005\197\255\114\006\154\006\114\006\114\006\
\117\007\079\007\254\254\000\000\000\000\000\000\169\255\245\254\
\006\255\000\000\042\005\200\255\000\000\246\254\169\255\114\006\
\000\000\196\255\117\007\000\000\114\006\117\007\114\006\117\007\
\118\255\117\007\079\255\114\006\114\006\114\006\000\000\125\255\
\179\003\000\000\169\255\169\255\008\255\169\255\161\255\009\000\
\011\000\117\007\000\000\042\005\124\002\000\000\145\004\000\000\
\083\255\000\000\243\006\117\007\114\006\000\000\000\000\013\007\
\099\007\117\007\000\000\000\000\141\255\125\255\169\255\161\255\
\161\255\000\000\000\000\000\000\000\000\114\006\114\006\000\000\
\006\000\117\007\000\000\114\006\242\255\000\000\161\255\117\007\
\000\000\224\255\013\007\000\000\087\255\000\000\000\000\247\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\178\005\000\000\000\000\000\000\000\000\000\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\255\054\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\255\
\000\000\000\000\000\000\054\004\000\000\000\000\229\001\017\002\
\000\000\000\000\000\000\000\000\201\003\031\007\000\000\133\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\233\255\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\101\255\000\000\000\000\
\009\001\000\000\177\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\245\003\033\004\000\000\000\000\
\061\002\105\002\053\001\097\001\141\001\185\001\000\000\149\002\
\193\002\237\002\025\003\069\003\113\003\157\003\098\004\000\000\
\000\000\000\000\000\000\000\000\000\000\233\255\000\000\000\000\
\000\000\000\000\100\255\045\000\000\000\241\004\129\255\000\000\
\142\004\000\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\101\255\000\000\000\000\186\004\221\000\145\255\
\000\000\105\255\000\000\000\000\000\000\000\000\000\000\248\254\
\000\000\000\000\000\000\000\000\000\000\000\000\007\255\000\000\
\000\000\012\000\000\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\230\004\150\255\000\000\000\000\000\000\
\000\000\251\254\000\000\000\000\000\000\248\254\000\000\010\255\
\016\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\157\255\000\000\000\000\000\000\000\000\018\255\110\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\176\255\
\004\000\134\000\000\000\000\000\000\000\089\255\000\000\000\000\
\000\000\138\000\000\000\021\001\108\255\000\000\055\001\104\255\
\000\000\000\000\000\000\254\255\162\255\080\000\120\000\000\000\
\000\000\110\000"

let yytablesize = 2207
let yytable = "\053\000\
\079\000\130\000\118\000\199\000\035\000\180\000\113\000\063\000\
\113\000\092\000\181\000\115\000\154\000\051\000\127\000\113\000\
\123\000\064\000\050\000\160\000\065\000\066\000\067\000\068\000\
\167\000\064\000\071\000\072\000\168\000\073\000\074\000\075\000\
\076\000\077\000\201\000\213\000\082\000\120\000\069\000\202\000\
\214\000\070\000\120\000\051\000\080\000\051\000\198\000\227\000\
\050\000\106\000\088\000\089\000\123\000\104\000\108\000\124\000\
\243\000\123\000\096\000\105\000\124\000\125\000\108\000\126\000\
\237\000\109\000\125\000\118\000\126\000\163\000\203\000\164\000\
\204\000\205\000\206\000\106\000\231\000\246\000\107\000\114\000\
\200\000\110\000\207\000\255\000\001\000\002\000\003\000\004\000\
\023\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\229\000\230\000\232\000\233\000\
\222\000\106\000\110\000\106\000\106\000\106\000\108\000\111\000\
\108\000\108\000\108\000\161\000\166\000\174\000\169\000\198\000\
\170\000\223\000\112\000\239\000\054\000\240\000\125\000\000\001\
\247\000\001\001\128\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\087\000\086\000\087\000\086\000\
\177\000\050\000\050\000\050\000\183\000\054\000\096\000\132\000\
\096\000\184\000\161\000\221\000\080\000\131\000\187\000\152\000\
\190\000\113\000\192\000\194\000\155\000\161\000\072\000\072\000\
\078\000\153\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\215\000\245\000\161\000\071\000\071\000\
\219\000\050\000\220\000\070\000\070\000\157\000\177\000\224\000\
\225\000\226\000\069\000\069\000\158\000\155\000\159\000\185\000\
\179\000\161\000\183\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\066\000\172\000\173\000\086\000\
\242\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\248\000\215\000\186\000\189\000\212\000\218\000\251\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\062\000\079\000\234\000\118\000\235\000\250\000\079\000\079\000\
\252\000\079\000\254\000\079\000\115\000\002\001\120\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\188\000\195\000\079\000\079\000\
\118\000\079\000\079\000\079\000\038\000\080\000\083\000\092\000\
\052\000\115\000\080\000\080\000\092\000\080\000\249\000\080\000\
\228\000\236\000\079\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\000\000\000\000\080\000\080\000\000\000\080\000\080\000\080\000\
\039\000\023\000\000\000\000\000\000\000\000\000\023\000\023\000\
\000\000\023\000\000\000\023\000\000\000\000\000\080\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\000\000\000\000\023\000\023\000\
\000\000\023\000\023\000\023\000\040\000\054\000\000\000\000\000\
\000\000\000\000\054\000\054\000\000\000\054\000\000\000\054\000\
\000\000\000\000\023\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
\000\000\000\000\054\000\054\000\000\000\054\000\054\000\054\000\
\041\000\078\000\000\000\000\000\000\000\000\000\078\000\078\000\
\000\000\078\000\000\000\078\000\000\000\000\000\054\000\078\000\
\078\000\078\000\078\000\078\000\078\000\000\000\000\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\000\000\000\000\000\000\078\000\078\000\
\000\000\078\000\078\000\078\000\026\000\066\000\000\000\000\000\
\000\000\000\000\066\000\066\000\000\000\066\000\000\000\066\000\
\000\000\000\000\078\000\066\000\066\000\066\000\066\000\066\000\
\066\000\000\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
\000\000\000\000\066\000\066\000\000\000\066\000\066\000\066\000\
\027\000\062\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\062\000\000\000\062\000\000\000\000\000\066\000\062\000\
\062\000\062\000\062\000\062\000\062\000\000\000\000\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\000\000\000\000\000\000\062\000\062\000\
\000\000\062\000\062\000\062\000\036\000\038\000\000\000\000\000\
\000\000\000\000\038\000\038\000\000\000\038\000\000\000\038\000\
\000\000\000\000\062\000\038\000\038\000\038\000\038\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\000\000\000\000\038\000\038\000\000\000\038\000\038\000\038\000\
\037\000\039\000\000\000\000\000\000\000\000\000\039\000\039\000\
\000\000\039\000\000\000\039\000\000\000\000\000\038\000\039\000\
\039\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\000\000\039\000\039\000\
\000\000\039\000\039\000\039\000\043\000\040\000\000\000\000\000\
\000\000\000\000\040\000\040\000\000\000\040\000\000\000\040\000\
\000\000\000\000\039\000\040\000\040\000\040\000\040\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\000\000\000\000\040\000\040\000\000\000\040\000\040\000\040\000\
\044\000\041\000\000\000\000\000\000\000\000\000\041\000\041\000\
\000\000\041\000\000\000\041\000\000\000\000\000\040\000\041\000\
\041\000\041\000\041\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\000\000\000\000\041\000\041\000\
\000\000\041\000\041\000\041\000\045\000\026\000\000\000\000\000\
\000\000\000\000\026\000\026\000\000\000\026\000\000\000\026\000\
\000\000\000\000\041\000\026\000\026\000\026\000\026\000\000\000\
\000\000\026\000\026\000\000\000\000\000\000\000\000\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\000\000\000\000\026\000\026\000\000\000\026\000\026\000\026\000\
\046\000\027\000\000\000\000\000\000\000\000\000\027\000\027\000\
\000\000\027\000\000\000\027\000\000\000\000\000\026\000\027\000\
\027\000\027\000\027\000\000\000\000\000\027\000\027\000\000\000\
\000\000\000\000\000\000\000\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\000\000\000\000\000\000\027\000\027\000\
\000\000\027\000\027\000\027\000\047\000\036\000\000\000\000\000\
\000\000\000\000\036\000\036\000\000\000\036\000\000\000\036\000\
\000\000\000\000\027\000\036\000\036\000\036\000\036\000\000\000\
\000\000\036\000\036\000\000\000\000\000\000\000\000\000\000\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
\000\000\000\000\036\000\036\000\000\000\036\000\036\000\036\000\
\048\000\037\000\000\000\000\000\000\000\000\000\037\000\037\000\
\000\000\037\000\000\000\037\000\000\000\000\000\036\000\037\000\
\037\000\037\000\037\000\000\000\000\000\037\000\037\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\000\000\000\000\000\000\037\000\037\000\
\000\000\037\000\037\000\037\000\049\000\043\000\000\000\000\000\
\000\000\000\000\043\000\043\000\000\000\043\000\000\000\043\000\
\000\000\000\000\037\000\043\000\043\000\043\000\043\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\000\000\043\000\043\000\000\000\043\000\043\000\043\000\
\028\000\044\000\000\000\000\000\000\000\000\000\044\000\044\000\
\000\000\044\000\000\000\044\000\000\000\000\000\043\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\044\000\044\000\
\000\000\044\000\044\000\044\000\032\000\045\000\085\000\000\000\
\000\000\000\000\045\000\045\000\000\000\045\000\000\000\045\000\
\000\000\000\000\044\000\045\000\045\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\
\000\000\000\000\045\000\045\000\000\000\045\000\045\000\045\000\
\033\000\046\000\000\000\000\000\000\000\000\000\046\000\046\000\
\000\000\046\000\000\000\046\000\000\000\000\000\045\000\046\000\
\046\000\046\000\046\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\000\000\000\000\046\000\046\000\
\000\000\046\000\046\000\046\000\000\000\047\000\000\000\000\000\
\000\000\000\000\047\000\047\000\000\000\047\000\000\000\047\000\
\000\000\000\000\046\000\047\000\047\000\047\000\047\000\000\000\
\000\000\024\000\116\000\000\000\000\000\000\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\047\000\047\000\000\000\047\000\047\000\047\000\
\000\000\048\000\000\000\000\000\000\000\000\000\048\000\048\000\
\000\000\048\000\000\000\048\000\000\000\000\000\047\000\048\000\
\048\000\048\000\048\000\000\000\000\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\048\000\048\000\
\000\000\048\000\048\000\048\000\000\000\049\000\000\000\000\000\
\000\000\000\000\049\000\049\000\000\000\049\000\000\000\049\000\
\000\000\000\000\048\000\049\000\049\000\049\000\049\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
\000\000\000\000\049\000\049\000\000\000\049\000\049\000\049\000\
\000\000\028\000\000\000\000\000\000\000\000\000\028\000\028\000\
\000\000\028\000\000\000\028\000\000\000\000\000\049\000\028\000\
\028\000\028\000\028\000\000\000\000\000\064\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\063\000\000\000\000\000\000\000\000\000\175\000\028\000\028\000\
\000\000\028\000\028\000\028\000\000\000\032\000\000\000\084\000\
\000\000\000\000\032\000\032\000\000\000\032\000\000\000\032\000\
\000\000\000\000\028\000\032\000\032\000\032\000\032\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\000\000\032\000\032\000\000\000\032\000\032\000\032\000\
\000\000\033\000\000\000\000\000\000\000\000\000\033\000\033\000\
\000\000\033\000\000\000\033\000\000\000\000\000\032\000\033\000\
\033\000\000\000\033\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\022\000\022\000\000\000\022\000\000\000\
\022\000\000\000\000\000\000\000\022\000\022\000\033\000\033\000\
\000\000\033\000\033\000\033\000\088\000\089\000\000\000\000\000\
\092\000\093\000\094\000\095\000\096\000\000\000\000\000\000\000\
\000\000\000\000\033\000\022\000\022\000\000\000\022\000\022\000\
\022\000\000\000\024\000\000\000\000\000\000\000\000\000\024\000\
\024\000\000\000\024\000\000\000\024\000\000\000\000\000\022\000\
\024\000\024\000\000\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\000\000\000\000\024\000\
\024\000\000\000\024\000\024\000\024\000\000\000\077\000\000\000\
\000\000\000\000\000\000\077\000\077\000\000\000\077\000\000\000\
\077\000\000\000\000\000\024\000\077\000\077\000\000\000\000\000\
\000\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\077\000\077\000\000\000\077\000\077\000\
\077\000\000\000\065\000\000\000\000\000\000\000\000\000\065\000\
\065\000\121\000\065\000\000\000\065\000\000\000\000\000\077\000\
\065\000\065\000\238\000\000\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\000\000\065\000\
\065\000\000\000\065\000\065\000\065\000\000\000\064\000\000\000\
\000\000\000\000\000\000\064\000\064\000\000\000\064\000\000\000\
\064\000\063\000\000\000\065\000\064\000\064\000\063\000\000\000\
\000\000\063\000\000\000\063\000\000\000\000\000\000\000\063\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\064\000\000\000\064\000\064\000\
\064\000\000\000\000\000\000\000\000\000\000\000\063\000\063\000\
\000\000\063\000\063\000\063\000\000\000\000\000\000\000\064\000\
\000\000\000\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\063\000\014\000\015\000\016\000\017\000\000\000\
\000\000\018\000\000\000\019\000\000\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\029\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\208\000\209\000\078\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\014\000\015\000\016\000\017\000\000\000\
\000\000\018\000\000\000\019\000\000\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\079\000\
\080\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\029\000\030\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\056\000\056\000\056\000\056\000\000\000\
\000\000\056\000\000\000\056\000\000\000\056\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\000\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\056\000\
\056\000\056\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\014\000\015\000\016\000\017\000\000\000\
\000\000\018\000\000\000\019\000\000\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\117\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\029\000\030\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\014\000\015\000\016\000\017\000\000\000\
\165\000\018\000\000\000\019\000\000\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\029\000\030\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\013\000\000\000\014\000\015\000\016\000\017\000\000\000\
\000\000\018\000\000\000\019\000\000\000\020\000\021\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\191\000\000\000\000\000\000\000\000\000\000\000\027\000\028\000\
\029\000\030\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\000\000\122\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\162\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\000\000\000\000\123\000\
\000\000\000\000\000\000\000\000\241\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\000\000\000\000\079\000\079\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\000\000\000\000\000\000\129\000\080\000\196\000\197\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\244\000\000\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000"

let yycheck = "\002\000\
\000\000\082\000\000\000\171\000\001\000\158\000\001\001\004\000\
\001\001\000\000\159\000\000\000\107\000\019\001\045\001\001\001\
\019\001\048\001\019\001\114\000\017\000\018\000\019\000\020\000\
\044\001\048\001\023\000\024\000\048\001\026\000\027\000\028\000\
\029\000\030\000\046\001\046\001\033\000\046\001\001\001\051\001\
\051\001\001\001\051\001\049\001\000\000\051\001\049\001\200\000\
\049\001\001\001\027\001\028\001\046\001\043\001\001\001\046\001\
\224\000\051\001\035\001\048\001\051\001\046\001\001\001\046\001\
\213\000\009\001\051\001\064\000\051\001\049\001\065\001\051\001\
\067\001\068\001\069\001\048\001\069\001\230\000\048\001\065\001\
\175\000\067\001\177\000\251\000\001\000\002\000\003\000\004\000\
\000\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\203\000\204\000\205\000\206\000\
\193\000\065\001\067\001\067\001\068\001\069\001\065\001\001\001\
\067\001\068\001\069\001\049\001\121\000\051\001\123\000\049\001\
\125\000\051\001\000\000\049\001\000\000\051\001\043\001\049\001\
\231\000\051\001\001\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\049\001\049\001\051\001\051\001\
\155\000\049\001\067\001\051\001\159\000\070\001\049\001\000\000\
\051\001\048\001\049\001\046\001\047\001\046\001\163\000\008\001\
\165\000\001\001\167\000\168\000\048\001\049\001\046\001\047\001\
\000\000\008\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\184\000\048\001\049\001\046\001\047\001\
\189\000\067\001\191\000\046\001\047\001\000\000\201\000\196\000\
\197\000\198\000\046\001\047\001\001\001\048\001\048\001\001\001\
\046\001\049\001\213\000\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\000\000\051\001\051\001\025\001\
\221\000\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\238\000\239\000\008\001\048\001\046\001\051\001\244\000\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\000\000\009\001\002\001\009\001\002\001\008\001\014\001\015\001\
\031\001\017\001\051\001\019\001\009\001\031\001\046\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\163\000\168\000\046\001\047\001\
\046\001\049\001\050\001\051\001\000\000\009\001\034\000\046\001\
\002\000\046\001\014\001\015\001\051\001\017\001\239\000\019\001\
\201\000\212\000\066\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\255\255\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\000\000\009\001\000\000\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\000\000\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\255\255\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\255\255\
\255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\255\255\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\255\255\009\001\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\255\255\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\255\255\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\025\001\026\001\255\255\255\255\000\000\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\255\255\
\000\000\255\255\255\255\255\255\255\255\067\001\046\001\047\001\
\255\255\049\001\050\001\051\001\255\255\009\001\255\255\009\001\
\255\255\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\066\001\023\001\024\001\025\001\026\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\046\001\047\001\255\255\049\001\050\001\051\001\
\255\255\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\066\001\023\001\
\024\001\255\255\026\001\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\017\001\255\255\
\019\001\255\255\255\255\255\255\023\001\024\001\046\001\047\001\
\255\255\049\001\050\001\051\001\027\001\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\255\255\066\001\046\001\047\001\255\255\049\001\050\001\
\051\001\255\255\009\001\255\255\255\255\255\255\255\255\014\001\
\015\001\255\255\017\001\255\255\019\001\255\255\255\255\066\001\
\023\001\024\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\046\001\
\047\001\255\255\049\001\050\001\051\001\255\255\009\001\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\017\001\255\255\
\019\001\255\255\255\255\066\001\023\001\024\001\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\046\001\047\001\255\255\049\001\050\001\
\051\001\255\255\009\001\255\255\255\255\255\255\255\255\014\001\
\015\001\014\001\017\001\255\255\019\001\255\255\255\255\066\001\
\023\001\024\001\066\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\046\001\
\047\001\255\255\049\001\050\001\051\001\255\255\009\001\255\255\
\255\255\255\255\255\255\014\001\015\001\255\255\017\001\255\255\
\019\001\009\001\255\255\066\001\023\001\024\001\014\001\255\255\
\255\255\017\001\255\255\019\001\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\255\255\049\001\050\001\
\051\001\255\255\255\255\255\255\255\255\255\255\046\001\047\001\
\255\255\049\001\050\001\051\001\255\255\255\255\255\255\066\001\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\066\001\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\255\255\255\255\255\255\255\255\255\255\255\255\
\071\001\072\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\047\001\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\047\001\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\010\001\011\001\012\001\013\001\255\255\
\255\255\016\001\255\255\018\001\255\255\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\051\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\050\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\050\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\046\001\047\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\255\255\255\255\046\001\047\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001"

let yynames_const = "\
  FULLSTOP\000\
  EOF\000\
  TRUE\000\
  FALSE\000\
  NULL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  CASE\000\
  OF\000\
  WHILE\000\
  DO\000\
  ASSERT\000\
  GOTO\000\
  FOR\000\
  UNTIL\000\
  STEP\000\
  AND\000\
  OR\000\
  SHL\000\
  SHR\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  DIV\000\
  REM\000\
  STARSTAR\000\
  EQ\000\
  NE\000\
  GT\000\
  LT\000\
  GE\000\
  LE\000\
  IS\000\
  ASSIGN\000\
  BEGIN\000\
  COLON\000\
  SEMICOLON\000\
  END\000\
  BRA\000\
  COMMA\000\
  BAR\000\
  KET\000\
  INTEGER\000\
  REAL\000\
  COMPLEX\000\
  LONG_REAL\000\
  LONG_COMPLEX\000\
  LOGICAL\000\
  BITS\000\
  STRING\000\
  REFERENCE\000\
  LONG\000\
  SHORT\000\
  ABS\000\
  NOT\000\
  ARRAY\000\
  COLONCOLON\000\
  PROCEDURE\000\
  VALUE\000\
  RESULT\000\
  RECORD\000\
  ALGOL\000\
  FORTRAN\000\
  "

let yynames_block = "\
  Identifier\000\
  String\000\
  Real\000\
  Imaginary\000\
  LongReal\000\
  LongImaginary\000\
  Bits\000\
  Integer\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 133 "parser.mly"
                          ( _1 )
# 974 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    Obj.repr(
# 134 "parser.mly"
                          ( _1 )
# 981 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    Obj.repr(
# 138 "parser.mly"
                                     ( _1 )
# 988 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 143 "parser.mly"
                  ( _1 )
# 995 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 146 "parser.mly"
                 ( _1 )
# 1002 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 151 "parser.mly"
                                 ( Tree.Integer       (pos 1, _1) )
# 1009 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 152 "parser.mly"
                                 ( Tree.Real          (pos 1, fst _1, snd _1) )
# 1016 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 153 "parser.mly"
                                 ( Tree.Imaginary     (pos 1, fst _1, snd _1) )
# 1023 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 154 "parser.mly"
                                 ( Tree.LongReal      (pos 1, fst _1, snd _1) )
# 1030 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 155 "parser.mly"
                                 ( Tree.LongImaginary (pos 1, fst _1, snd _1) )
# 1037 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 156 "parser.mly"
                                 ( Tree.String        (pos 1, _1) )
# 1044 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 157 "parser.mly"
                                 ( Tree.Bits          (pos 1, _1) )
# 1051 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parser.mly"
                                 ( Tree.TRUE          (pos 1) )
# 1057 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "parser.mly"
                                 ( Tree.FALSE         (pos 1) )
# 1063 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parser.mly"
                                 ( Tree.NULL          (pos 1) )
# 1069 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 162 "parser.mly"
                                 ( _1 )
# 1076 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 163 "parser.mly"
                                 ( _1 )
# 1083 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 164 "parser.mly"
                                 ( _1 )
# 1090 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 165 "parser.mly"
                                 ( _1 )
# 1097 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 166 "parser.mly"
                                 ( _1 )
# 1104 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 167 "parser.mly"
                                 ( Tree.GOTO (pos 1, _2) )
# 1111 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 168 "parser.mly"
                                 ( Tree.ASSERT (pos 1, _2) )
# 1118 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 170 "parser.mly"
                                 ( _1 )
# 1125 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 171 "parser.mly"
                                 ( Tree.Assignment (pos 1, _1, _3) )
# 1133 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 172 "parser.mly"
                                 ( _2 )
# 1140 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 174 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.IDENTITY, _2) )
# 1147 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 175 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.NEG, _2) )
# 1154 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 176 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.NOT, _2) )
# 1161 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 177 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.LONG, _2) )
# 1168 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 178 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.SHORT, _2) )
# 1175 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 179 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.ABS, _2) )
# 1182 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 181 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.AND,  _3) )
# 1190 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 182 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.OR,   _3) )
# 1198 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 183 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.SHL,  _3) )
# 1206 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 184 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.SHR,  _3) )
# 1214 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 185 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.ADD,  _3) )
# 1222 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 186 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.SUB,  _3) )
# 1230 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 187 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.MUL,  _3) )
# 1238 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 188 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.RDIV, _3) )
# 1246 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 189 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.IDIV, _3) )
# 1254 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 190 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.REM,  _3) )
# 1262 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 191 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.PWR,  _3) )
# 1270 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 192 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.EQ,   _3) )
# 1278 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 193 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.NE,   _3) )
# 1286 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 194 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.GT,   _3) )
# 1294 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 195 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.LT,   _3) )
# 1302 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 196 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.GE,   _3) )
# 1310 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 197 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.LE,   _3) )
# 1318 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 198 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.IS,   _3) )
# 1326 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 202 "parser.mly"
                                    ( lone _1 )
# 1333 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 203 "parser.mly"
                                    ( _1 ++ _3 )
# 1341 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq * Tree.t seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 210 "parser.mly"
                                        ( Tree.BEGIN (pos 1, lst (fst _1), lst (snd _1 ++ _2), _3) )
# 1350 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq * Tree.t seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 211 "parser.mly"
                                        ( Tree.BEGIN (pos 1, lst (fst _1), lst (snd _1 ++ Tree.Empty (pos 2)), _2) )
# 1358 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 215 "parser.mly"
                 ( Table.Id.dummy )
# 1364 "parser.ml"
               : Table.Id.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 216 "parser.mly"
                 ( _2 )
# 1371 "parser.ml"
               : Table.Id.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t seq) in
    Obj.repr(
# 220 "parser.mly"
                                   ( (_1,     Empty) )
# 1378 "parser.ml"
               : Tree.t seq * Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq * Tree.t seq) in
    Obj.repr(
# 221 "parser.mly"
                                   ( (fst _1, snd _1 ++ (Tree.Empty (rhs_end_pos 2))) )
# 1385 "parser.ml"
               : Tree.t seq * Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq * Tree.t seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 222 "parser.mly"
                                   ( (fst _1, snd _1 ++ _2) )
# 1393 "parser.ml"
               : Tree.t seq * Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq * Tree.t seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t) in
    Obj.repr(
# 223 "parser.mly"
                                   ( (fst _1, snd _1 ++ (Tree.Label (pos 2, _2))) )
# 1401 "parser.ml"
               : Tree.t seq * Tree.t seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "parser.mly"
                                    ( Empty )
# 1407 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 228 "parser.mly"
                                    ( _1 ++ _2 )
# 1415 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 235 "parser.mly"
                                                 ( Tree.IF (pos 1, _2, Tree.Empty (rhs_end_pos 3)) )
# 1422 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 236 "parser.mly"
                                                 ( Tree.IF (pos 1, _2, _4) )
# 1430 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 237 "parser.mly"
                                                 ( Tree.IF_else (pos 1, _2, _4, _6) )
# 1439 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 238 "parser.mly"
                                                 ( Tree.IF_else (pos 1, _2, Tree.Empty (rhs_end_pos 3), _5) )
# 1447 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 239 "parser.mly"
                                                 ( Tree.IF_else (pos 1, _2, _4, Tree.Empty (rhs_end_pos 5)) )
# 1455 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq) in
    Obj.repr(
# 243 "parser.mly"
                                                       ( Tree.CASE_expr (pos 1, _2, lst _5) )
# 1463 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 244 "parser.mly"
                                                       ( Tree.CASE (pos 1, _2, lst _5) )
# 1472 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 249 "parser.mly"
                                        ( _1 ++ _3 )
# 1480 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq) in
    Obj.repr(
# 250 "parser.mly"
                                        ( _1 ++ Tree.Empty (pos 2) )
# 1487 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 251 "parser.mly"
                                        ( lone _1 )
# 1494 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "parser.mly"
                                        ( lone (Tree.Empty (symbol_start_pos ())) )
# 1500 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 258 "parser.mly"
                              ( Tree.WHILE (pos 1, _2, _3) )
# 1508 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 262 "parser.mly"
                                                                              ( Tree.FOR (pos 1, _2, _4, _6, _7) )
# 1518 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 263 "parser.mly"
                                                                              ( Tree.FOR_step (pos 1,_2,_4,_6,_8,_9) )
# 1529 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 264 "parser.mly"
                                                                              ( Tree.FOR_list (pos 1, _2, lst _4, _5) )
# 1538 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 268 "parser.mly"
                 ( _2 )
# 1545 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "parser.mly"
                 ( Tree.Empty (rhs_end_pos 1) )
# 1551 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 277 "parser.mly"
    ( Tree.Identifier (pos 1, _1) )
# 1558 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq) in
    Obj.repr(
# 279 "parser.mly"
    ( Tree.Parametrized (pos 1, _1, lst _3) )
# 1566 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 281 "parser.mly"
    ( Tree.Substring  (pos 1, Tree.Identifier (pos 1, _1), _3, (int_of_string _5)) )
# 1575 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Tree.t seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 283 "parser.mly"
    ( Tree.Substring  (pos 1, Tree.Parametrized (pos 1, _1, lst _3), _6, (int_of_string _8)) )
# 1585 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 287 "parser.mly"
                                                ( lone _1 )
# 1592 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 288 "parser.mly"
                                                ( _1 ++ _3 )
# 1600 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "parser.mly"
             ( Tree.STAR (pos 1) )
# 1606 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 293 "parser.mly"
             ( _1 )
# 1613 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "parser.mly"
             ( Tree.Empty (symbol_start_pos ()) )
# 1619 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 301 "parser.mly"
                        ( _1 )
# 1626 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 302 "parser.mly"
                        ( _1 )
# 1633 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 303 "parser.mly"
                        ( _1 )
# 1640 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 304 "parser.mly"
                        ( _1 )
# 1647 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t seq) in
    Obj.repr(
# 308 "parser.mly"
                               ( Tree.Simple (pos 1, _1, lst _2) )
# 1655 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : (Tree.t * Tree.t) seq) in
    Obj.repr(
# 312 "parser.mly"
                                                            ( Tree.ARRAY (pos 1, _1, lst _3, lst _5) )
# 1664 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t * Tree.t) in
    Obj.repr(
# 316 "parser.mly"
                                  ( lone _1 )
# 1671 "parser.ml"
               : (Tree.t * Tree.t) seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (Tree.t * Tree.t) seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t * Tree.t) in
    Obj.repr(
# 317 "parser.mly"
                                  ( _1 ++ _3 )
# 1679 "parser.ml"
               : (Tree.t * Tree.t) seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 321 "parser.mly"
                                    ( (_1, _3) )
# 1687 "parser.ml"
               : Tree.t * Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq) in
    Obj.repr(
# 325 "parser.mly"
                                                      ( Tree.RECORD (pos 1, _2, lst _4) )
# 1695 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 329 "parser.mly"
                                                         ( lone _1 )
# 1702 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 330 "parser.mly"
                                                         ( _1 ++ _3 )
# 1710 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 334 "parser.mly"
                                     ( Tree.INTEGER )
# 1716 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 335 "parser.mly"
                                     ( Tree.REAL )
# 1722 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 336 "parser.mly"
                                     ( Tree.COMPLEX )
# 1728 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 337 "parser.mly"
                                     ( Tree.LONG_REAL )
# 1734 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 338 "parser.mly"
                                     ( Tree.LONG_COMPLEX )
# 1740 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "parser.mly"
                                     ( Tree.LOGICAL )
# 1746 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 340 "parser.mly"
                                     ( Tree.BITS )
# 1752 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 341 "parser.mly"
                                     ( Tree.BITS )
# 1759 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "parser.mly"
                                     ( Tree.STRING None )
# 1765 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 343 "parser.mly"
                                     ( Tree.STRING (Some (int_of_string _3)) )
# 1772 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t seq) in
    Obj.repr(
# 344 "parser.mly"
                                     ( Tree.REFERENCE (pos 1, lst _3) )
# 1779 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 348 "parser.mly"
                                   ( lone _1 )
# 1786 "parser.ml"
               : Table.Id.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Table.Id.t seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 349 "parser.mly"
                                   ( _1 ++ _3 )
# 1794 "parser.ml"
               : Table.Id.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_body) in
    Obj.repr(
# 356 "parser.mly"
                                                                        ( Tree.PROCEDURE (pos 1, Some _1, _3, lst _4, _6) )
# 1804 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_body) in
    Obj.repr(
# 357 "parser.mly"
                                                               ( Tree.PROCEDURE (pos 1, None, _2, lst _3, _5) )
# 1813 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 361 "parser.mly"
                    ( _1 )
# 1820 "parser.ml"
               : 'procedure_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 362 "parser.mly"
                    ( Tree.External (pos 1, _2) )
# 1827 "parser.ml"
               : 'procedure_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 363 "parser.mly"
                    ( Tree.External (pos 1, _2) )
# 1834 "parser.ml"
               : 'procedure_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 364 "parser.mly"
                    ( Tree.Empty (symbol_start_pos ()) )
# 1840 "parser.ml"
               : 'procedure_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t seq) in
    Obj.repr(
# 368 "parser.mly"
                                ( _2 )
# 1847 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "parser.mly"
                                ( Empty )
# 1853 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 373 "parser.mly"
                                                           ( lone _1 )
# 1860 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 374 "parser.mly"
                                                           ( _1 ++ _3 )
# 1868 "parser.ml"
               : Tree.t seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t seq) in
    Obj.repr(
# 378 "parser.mly"
                                                    ( Tree.Name_formal (pos 1, _1, lst _2) )
# 1876 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t seq) in
    Obj.repr(
# 379 "parser.mly"
                                                    ( Tree.VALUE_formal (pos 1, _1, lst  _3) )
# 1884 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t seq) in
    Obj.repr(
# 380 "parser.mly"
                                                    ( Tree.RESULT_formal (pos 1, _1, lst  _3) )
# 1892 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t seq) in
    Obj.repr(
# 381 "parser.mly"
                                                    ( Tree.VALUE_RESULT_formal (pos 1 , _1, lst _4) )
# 1900 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t seq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Tree.t seq) in
    Obj.repr(
# 382 "parser.mly"
                                                    ( Tree.PROCEDURE_formal (pos 1, Some  _1, lst _3, lst _4) )
# 1909 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t seq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t seq) in
    Obj.repr(
# 383 "parser.mly"
                                                    ( Tree.PROCEDURE_formal (pos 1, None, lst _2, lst _3)  )
# 1917 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t seq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 384 "parser.mly"
                                                    ( Tree.ARRAY_formal (pos 1, _1, lst _3, _5)  )
# 1926 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 388 "parser.mly"
                   ( 1 )
# 1932 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 389 "parser.mly"
                   ( _1 + 1 )
# 1939 "parser.ml"
               : int))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry separate_procedure *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry test_declaration *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry test_expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Tree.t)
let separate_procedure (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Tree.t)
let test_declaration (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Tree.t)
let test_expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Tree.t)
