/* GENERATED BY scanner.py: DON'T EDIT THIS FILE, EDIT scanner.py */

    case 0:
      switch (c) {
      case '0' ... '9': scanner->state = 101; Scanner_start(scanner); Scanner_addchar(scanner, c); break;
      case '\'': case 'e': case 'E': scanner->state = 103; Scanner_start(scanner); Scanner_addstring(scanner, "1.0e"); break;
      case '.': scanner->state = 107; Scanner_start(scanner); Scanner_addstring(scanner, "0."); break;
      case '-': case '+': scanner->state = 100; Scanner_start(scanner); Scanner_addchar(scanner, c); break;
      case '"': scanner->state = 301; Scanner_start(scanner); break;
      case '#': scanner->state = 401; Scanner_start(scanner);  break;
      case 'T': case 't': scanner->state = 501; Scanner_start(scanner); Scanner_addchar(scanner, c); break;
      case 'F': case 'f': scanner->state = 601; Scanner_start(scanner); Scanner_addchar(scanner, c); break;
      case ' ': scanner->state = 0; ; break;
      case '\n': scanner->state = 0; ; break;
      case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Eof; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 100:
      switch (c) {
      case '.': scanner->state = 107; Scanner_addstring(scanner, "0."); break;
      case '0' ... '9': scanner->state = 101; Scanner_addchar(scanner, c); break;
      case '\'': case 'e': case 'E': scanner->state = 103; Scanner_addstring(scanner, "1.0e"); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 101:
      switch (c) {
      case '0' ... '9': scanner->state = 101; Scanner_addchar(scanner, c); break;
      case '.': scanner->state = 102; Scanner_addchar(scanner, c); break;
      case '\'': case 'e': case 'E': scanner->state = 103; Scanner_addstring(scanner, ".0e"); break;
      case 'I': case 'i': scanner->state = 105; ; break;
      case 'L': case 'l': scanner->state = 109; ; break;
      case '-': case '+': scanner->state = 200; Scanner_addchar(scanner, c); break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Integer; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 102:
      switch (c) {
      case '0' ... '9': scanner->state = 102; Scanner_addchar(scanner, c); break;
      case '\'': case 'e': case 'E': scanner->state = 103; Scanner_addstring(scanner, "0e"); break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Real; break;
      case 'I': case 'i': scanner->state = 105; Scanner_addstring(scanner, "0"); break;
      case 'L': case 'l': scanner->state = 109; Scanner_addstring(scanner, "0"); break;
      case '-': case '+': scanner->state = 200; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 103:
      switch (c) {
      case '0' ... '9': scanner->state = 104; Scanner_addchar(scanner, c); break;
      case '-': case '+': scanner->state = 108; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 104:
      switch (c) {
      case '0' ... '9': scanner->state = 104; Scanner_addchar(scanner, c); break;
      case 'I': case 'i': scanner->state = 105; ; break;
      case 'L': case 'l': scanner->state = 109; ; break;
      case '-': case '+': scanner->state = 200; Scanner_addchar(scanner, c); break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Real; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 105:
      switch (c) {
      case 'L': case 'l': scanner->state = 106; ; break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Imaginary; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 106:
      switch (c) {
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Imaginary; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 107:
      switch (c) {
      case '0' ... '9': scanner->state = 102; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 108:
      switch (c) {
      case '0' ... '9': scanner->state = 104; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 109:
      switch (c) {
      case '-': case '+': scanner->state = 200; Scanner_addchar(scanner, c); break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Real; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 200:
      switch (c) {
      case '0' ... '9': scanner->state = 201; Scanner_addchar(scanner, c); break;
      case '\'': case 'e': case 'E': scanner->state = 203; Scanner_addstring(scanner, "1.0e"); break;
      case '.': scanner->state = 207; Scanner_addstring(scanner, "0."); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 201:
      switch (c) {
      case '0' ... '9': scanner->state = 201; Scanner_addchar(scanner, c); break;
      case '.': scanner->state = 202; Scanner_addchar(scanner, c); break;
      case 'I': case 'i': scanner->state = 205; ; break;
      case '\'': case 'e': case 'E': scanner->state = 203; Scanner_addstring(scanner, ".0e"); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 202:
      switch (c) {
      case '0' ... '9': scanner->state = 202; Scanner_addchar(scanner, c); break;
      case '\'': case 'e': case 'E': scanner->state = 203; Scanner_addstring(scanner, "0e"); break;
      case 'I': case 'i': scanner->state = 205; Scanner_addstring(scanner, "0"); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 203:
      switch (c) {
      case '0' ... '9': scanner->state = 204; Scanner_addchar(scanner, c); break;
      case '-': case '+': scanner->state = 209; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 204:
      switch (c) {
      case '0' ... '9': scanner->state = 204; Scanner_addchar(scanner, c); break;
      case 'I': case 'i': scanner->state = 205; ; break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Complex; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 205:
      switch (c) {
      case 'L': case 'l': scanner->state = 206; ; break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Complex; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 206:
      switch (c) {
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Complex; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 207:
      switch (c) {
      case '0' ... '9': scanner->state = 202; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 209:
      switch (c) {
      case '0' ... '9': scanner->state = 204; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 301:
      switch (c) {
      case ' ': case '!':  case '#' ... '~': case '\xAF' ... '\xFF': scanner->state = 301; Scanner_addchar(scanner, c); break;
      case '"': scanner->state = 302; ; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 302:
      switch (c) {
      case '"': scanner->state = 301; Scanner_addstring(scanner, "\"\""); break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return String;  break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 401:
      switch (c) {
      case '0' ... '9': case 'A' ... 'F': case 'a' ... 'f':  scanner->state = 401; Scanner_addchar(scanner, c); break;
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Bits; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 501:
      switch (c) {
      case 'R': case 'r': scanner->state = 502; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 502:
      switch (c) {
      case 'U': case 'u': scanner->state = 503; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 503:
      switch (c) {
      case 'E': case 'e': scanner->state = 504; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 504:
      switch (c) {
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Logical; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 601:
      switch (c) {
      case 'A': case 'a': scanner->state = 602; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 602:
      switch (c) {
      case 'L': case 'l': scanner->state = 603; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 603:
      switch (c) {
      case 'S': case 's': scanner->state = 604; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 604:
      switch (c) {
      case 'E': case 'e': scanner->state = 605; Scanner_addchar(scanner, c); break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;

    case 605:
      switch (c) {
      case ' ': case '\n': case EOF: scanner->state = 0; Scanner_close_buffer(scanner); return Logical; break;

      default: Scanner_close_buffer(scanner); return Error;
      }
      break;
